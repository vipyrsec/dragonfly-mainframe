[project]
name = "dragonfly-mainframe"
description = "Distributes tasks to dragonfly-clients and handles package status updates."
authors = [
  { name = "Vipyr Security Developers", email = "support@vipyrsec.com" },
]
requires-python = ">=3.12,<3.13"
license = { text = "MIT" }

dependencies = [
  "alembic==1.13.2",
  "asgi-correlation-id==4.3.1",
  "dragonfly-logging-config @ git+https://github.com/vipyrsec/dragonfly-logging-config@v1.3.0",
  "fastapi-pagination>=0.12.25",
  "fastapi-slim==0.112.0",
  "httpx==0.27.0",
  "letsbuilda-pypi==5.1.0",
  "psycopg2-binary==2.9.9",
  "pydantic-settings==2.3.4",
  "pyjwt[crypto]==2.8.0",
  "python-dotenv==1.0.1",
  "sentry-sdk==2.11.0",
  "SQLAlchemy==2.0.31",
  "structlog-sentry==2.1.0",
  "structlog==24.4.0",
  "uvicorn[standard]==0.30.3",
  "prometheus-client>=0.21.0",
  "prometheus-fastapi-instrumentator>=7.0.0",
]
dynamic = ["version"]

[project.urls]
repository = "https://github.com/vipyrsec/dragonfly-mainframe/"
documentation = "https://docs.vipyrsec.dev/dragonfly-mainframe/"

[tool.pdm]
version = { source = "file", path = "src/mainframe/__init__.py" }

[tool.pdm.dev-dependencies]
docs = ["furo", "releases", "sphinx", "sphinx-autoapi"]
lint = ["pre-commit==3.7.1", "pyright==1.1.373", "ruff==0.5.5"]
logs = ["rich==13.7.1"]
test = ["coverage==7.6.0", "pytest==8.3.2"]

[tool.pdm.scripts]
format = { shell = "ruff format" }
lint = { shell = "pyright; ruff check ." }
test = { shell = "docker compose -f compose.yaml -f compose-tests.yaml up --build --exit-code-from mainframe" }
coverage = { shell = "coverage run -m pytest tests -vv && coverage report -m --skip-covered && coverage xml" }
precommit = { shell = "pre-commit run --all-files" }
all = { composite = ["format", "lint", "test"] }

start = { cmd = "docker compose up --build" }

[tool.ruff]
line-length = 120

[tool.pyright]
include = ["src/**/*.py"]
ignore = ["alembic/"]

venvPath = "."
venv = ".venv"

strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
reportMissingModuleSource = "warning"
reportMissingImports = "error"
reportUndefinedVariable = "error"
reportAssertAlwaysTrue = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidTypeVarUse = "error"
reportMissingTypeStubs = "none"
reportSelfClsParameterName = "error"
reportUnsupportedDunderAll = "error"
reportUnusedExpression = "error"
reportWildcardImportFromLibrary = "error"
reportGeneralTypeIssues = "error"
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
reportTypedDictNotRequiredAccess = "error"
reportPrivateImportUsage = "error"
reportUnboundVariable = "error"
reportUnusedCoroutine = "error"
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportDuplicateImport = "error"
reportFunctionMemberAccess = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInvalidStubStatement = "error"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "error"
reportMissingTypeArgument = "error"
reportOverlappingOverload = "error"
reportPrivateUsage = "error"
reportTypeCommentUsage = "error"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownMemberType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "error"
reportUnusedClass = "error"
reportUnusedImport = "error"
reportUnusedFunction = "error"
reportUnusedVariable = "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"

[tool.coverage.run]
branch = false
omit = [
  "__pypackages__/*",
  "src/mainframe/custom_exceptions.py",
  "src/mainframe/database.py",
  "src/mainframe/dependencies.py",
  "src/mainframe/json_web_token.py",
]

[tool.coverage.report]
fail_under = 100
